# QUESTION 2
import sympy as sym

# LINEARISATION!
# φ(F, x3, x4) ~ φ(F0, x30, x40) + (dφ/dF)(F0, x30, x40) * (F - F0)
#                                + (dφ/dx3)(F0, x30, x40) * (x3 - x30)
#                                + (dφ/dx4)(F0, x30, x40) * (x4 - x40)
# Define all involved symbolic variables
# constants
M, m, g, ell = sym.symbols('M, m, g, ell')
# system variables
x1, x2, x3, x4, F = sym.symbols('x1, x2, x3, x4, F')
# Define φ
phi = 4 * m * ell * x4 ** 2 * sym.sin(x3) + 4 * F - 3 * m * g * sym.sin(x3) * sym.cos(x3)
phi /= 4 * (M + m) - 3 * m * sym.cos(x3) ** 2
# Define psi
psi = -3 * (m * ell * x4 ** 2 * sym.sin(x3) * sym.cos(x3) + F * sym.cos(x3) - (M + m) * g * sym.sin(x3))
psi /= (4 * (M + m) - 3 * m * sym.cos(x3) ** 2) * ell
# Determine the (partial) derivatives of φ, wrt to F, x3, x4
phi_deriv_F = phi.diff(F)
phi_deriv_x3 = phi.diff(x3)
phi_deriv_x4 = phi.diff(x4)
# Determine partial derivatives of psi wrt F, x3 and x4
psi_deriv_F = psi.diff(F)
psi_deriv_x3 = psi.diff(x3)
psi_deriv_x4 = psi.diff(x4)
F0 = 0
x30 = 0
x40 = 0
phi_deriv_F_at_equlibrium = phi_deriv_F.subs([(F, F0), (x3, x30), (x4, x40)])
phi_deriv_x3_at_equlibrium = phi_deriv_x3.subs([(F, F0), (x3, x30), (x4, x40)])
phi_deriv_x4_at_equlibrium = phi_deriv_x4.subs([(F, F0), (x3, x30), (x4, x40)])

psi_deriv_F_at_equilibrium = psi_deriv_F.subs([(F, F0), (x3, x30), (x4, x40)])
psi_deriv_x3_at_equilibrium = psi_deriv_x3.subs([(F, F0), (x3, x30), (x4, x40)])
psi_deriv_x4_at_equilibrium = psi_deriv_x4.subs([(F, F0), (x3, x30), (x4, x40)])

# x2' = aF - bx3
a = phi_deriv_F_at_equlibrium
b = -phi_deriv_x3_at_equlibrium
c = 3 / ell / (4*M+m)
d = 3 * (M + m) * g / ell / (4*M+m)
M_value = 0.3
m_value = 0.1
ell_value = 0.35
g_value = 9.81

# Finding numerical values for a, b, c and d
a_value = a.subs([(M, M_value), (m, m_value)])
b_value = b.subs([(M, M_value), (m, m_value), (g, g_value)])
c_value = c.subs([(M, M_value), (m, m_value), (g, g_value), (ell, ell_value)])
d_value = d.subs([(M, M_value), (m, m_value), (g, g_value), (ell, ell_value)])


s = sym.symbols('s')
G_theta = - c_value / (s**2 - d_value)                  # transfer function of G(theta)
G_x = a_value * (s**2 - d_value) + b_value * c_value    # transfer function of G(x) in numerator
G_x /= s**2 * (s**2 - d_value)                          # transfer function of G(x) in denominator

print(G_theta)  # prints value for G theta for question 2
print(G_x)      # prints value for Gx for question 2
