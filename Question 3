# QUESTION 3

import sympy as sym
# LINEARISATION!
# φ(F, x3, x4) ~ φ(F0, x30, x40) + (dφ/dF)(F0, x30, x40) * (F - F0)
#                                + (dφ/dx3)(F0, x30, x40) * (x3 - x30)
#                                + (dφ/dx4)(F0, x30, x40) * (x4 - x40)
# Define all involved symbolic variables
# constants
M, m, g, ell, w = sym.symbols('M, m, g, ell, w', real=True, positive=True)
# system variables
x1, x2, x3, x4, F = sym.symbols('x1, x2, x3, x4, F')
# Define φ
phi = 4 * m * ell * x4**2 * sym.sin(x3) + 4 * F - 3 * m * g * sym.sin(x3) * sym.cos(x3)
phi /= 4 * (M + m) - 3 * m * sym.cos(x3)**2
# Define psi
psi = -3 * (m * ell * x4 ** 2 * sym.sin(x3) * sym.cos(x3) + F * sym.cos(x3) - (M + m) * g * sym.sin(x3))
psi /= (4 * (M + m) - 3 * m * sym.cos(x3) ** 2) * ell

# Determine the (partial) derivatives of φ, wrt to F, x3, x4
phi_deriv_F = phi.diff(F)
phi_deriv_x3 = phi.diff(x3)
phi_deriv_x4 = phi.diff(x4)

# Determine partial derivatives of psi wrt F, x3 and x4
psi_deriv_F = psi.diff(F)
psi_deriv_x3 = psi.diff(x3)
psi_deriv_x4 = psi.diff(x4)

# Equilibrium values
F0 = 0
x30 = 0
x40 = 0

# Derivatives of phi
phi_deriv_F_at_equlibrium = phi_deriv_F.subs([(F, F0), (x3, x30), (x4, x40)])
phi_deriv_x3_at_equlibrium = phi_deriv_x3.subs([(F, F0), (x3, x30), (x4, x40)])
phi_deriv_x4_at_equlibrium = phi_deriv_x4.subs([(F, F0), (x3, x30), (x4, x40)])


# Derivatives of psi
psi_deriv_F_at_equilibrium = psi_deriv_F.subs([(F, F0), (x3, x30), (x4, x40)])
psi_deriv_x3_at_equilibrium = psi_deriv_x3.subs([(F, F0), (x3, x30), (x4, x40)])
psi_deriv_x4_at_equilibrium = psi_deriv_x4.subs([(F, F0), (x3, x30), (x4, x40)])


# x2' = aF - bx3
a = phi_deriv_F_at_equlibrium
b = -phi_deriv_x3_at_equlibrium
c = 3 / ell / (4*M+m)
d = 3 * (M + m) * g / ell / (4*M+m)

# Parameter values
M_value = 0.3
m_value = 0.1
ell_value = 0.35
g_value = 9.81

# Finding values of a, b , c and d for parameter values above
a_value = a.subs([(M, M_value), (m, m_value)])
b_value = b.subs([(M, M_value), (m, m_value), (g, g_value)])
c_value = c.subs([(M, M_value), (m, m_value), (g, g_value), (ell, ell_value)])
d_value = d.subs([(M, M_value), (m, m_value), (g, g_value), (ell, ell_value)])
s, t = sym.symbols('s, t')
a, b, c, d = sym.symbols('a, b, c, d', real=True, positive=True)
G_theta = - c / (s**2 - d)      # tf of G(theta)
G_x = a * (s**2 - d) + b * c    # tf of G(x) in numerator
G_x /= s**2 * (s**2 - d)           # tf of G(x) in denominator

# ------G(theta) Responses-------
# Impulse Response
F_s = 1
X3_s = G_theta * F_s        # response in s domain
x3_t = sym.inverse_laplace_transform(X3_s, s, t) # response in t domain
sym.pprint(x3_t.simplify())

# Step Response
F_s = 1 / s
X3_s = G_theta * F_s        # response in s domain
x3_t = sym.inverse_laplace_transform(X3_s, s, t) # response in t domain
sym.pprint(x3_t.simplify())

# Frequency Response
F_s = w / s**2 + w**2
X3_s = G_theta * F_s        # response in s domain
x3_t = sym.inverse_laplace_transform(X3_s, s, t) # response in t domain
sym.pprint(x3_t.simplify())


# ------G(x) Responses-------
# Impulse Response
F_s = 1
X1_s = G_x * F_s        # response in s domain
x1_t = sym.inverse_laplace_transform(X1_s, s, t) # response in t domain
sym.pprint(x1_t.simplify())

# Step Response
F_s = 1 / s
X1_s = G_x * F_s        # response in s domain
x1_t = sym.inverse_laplace_transform(X1_s, s, t) # response in t domain
sym.pprint(x1_t.simplify())

# Frequency Response
F_s = w / s**2 + w**2
X1_s = G_x * F_s        # response in s domain
x1_t = sym.inverse_laplace_transform(X1_s, s, t) # response in t domain
sym.pprint(x1_t.simplify())



# -----RESPONSES---------


# -c⋅sinh(√d⋅t)⋅θ(t) 
# ───────────────────
#          √d        
#          2⎛√d⋅t⎞      
# -2⋅c⋅sinh ⎜────⎟⋅θ(t) 
#           ⎝ 2  ⎠      
# ──────────────────────
#           d           
#                                                         2                
#                            ⎛    1                ⎞   c⋅w ⋅sinh(√d⋅t)⋅θ(t)
# c⋅w⋅InverseLaplaceTransform⎜─────────, s, t, None⎟ - ────────────────────
#                            ⎜   2    4            ⎟            √d         
#                            ⎝d⋅s  - s             ⎠                       
#                     (a⋅d - b⋅c)⋅(√d⋅sinh(√d⋅t) - d⋅t)⋅θ(t)
# a⋅sinh(√d⋅t)⋅θ(t) - ──────────────────────────────────────
#                                       3/2                 
#                                      d                    
# ──────────────────────────────────────────────────────────
#                             √d                            
#                                    ⎛   2                   ⎞     
#         2⎛√d⋅t⎞        (a⋅d - b⋅c)⋅⎝d⋅t  - 2⋅cosh(√d⋅t) + 2⎠⋅θ(t)
# 2⋅a⋅sinh ⎜────⎟⋅θ(t) + ──────────────────────────────────────────
#          ⎝ 2  ⎠                           2⋅d                    
# ─────────────────────────────────────────────────────────────────
#                                 d                                
#   ⎛                         ⎛                                                 
#   ⎜                         ⎜  a⋅w⋅(√d⋅sinh(√d⋅t) - d⋅t)⋅θ(t)   a⋅(√d⋅sinh(√d⋅
# w⋅⎜a⋅w⋅sinh(√d⋅t)⋅θ(t) + √d⋅⎜- ────────────────────────────── + ──────────────
#   ⎜                         ⎜                d                                
#   ⎝                         ⎝                                                d
# ──────────────────────────────────────────────────────────────────────────────
#                                                                               
# 
#                    ⎛                      ⎛   2    ⎞⎞                         
# t) - d⋅t)⋅θ(t)   a⋅⎝6⋅√d⋅sinh(√d⋅t) - d⋅t⋅⎝d⋅t  + 6⎠⎠⋅θ(t)   b⋅c⋅w⋅(√d⋅sinh(√d
# ────────────── - ───────────────────────────────────────── + ─────────────────
# 2                                      2                                     2
#                                     6⋅d                                     d 
# ──────────────────────────────────────────────────────────────────────────────
#                                √d                                             
# 
#                       ⎛                      ⎛   2    ⎞⎞     ⎞⎞
# ⋅t) - d⋅t)⋅θ(t)   b⋅c⋅⎝6⋅√d⋅sinh(√d⋅t) - d⋅t⋅⎝d⋅t  + 6⎠⎠⋅θ(t)⎟⎟
# ─────────────── + ───────────────────────────────────────────⎟⎟
#                                          3                   ⎟⎟
#                                       6⋅d                    ⎠⎠
# ───────────────────────────────────────────────────────────────
#                                                                
# 
# Process finished with exit code 0
