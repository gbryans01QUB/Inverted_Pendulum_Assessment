# QUESTION 5
import sympy as sym
import numpy as np
# LINEARISATION!
# φ(F, x3, x4) ~ φ(F0, x30, x40) + (dφ/dF)(F0, x30, x40) * (F - F0)
#                                + (dφ/dx3)(F0, x30, x40) * (x3 - x30)
#                                + (dφ/dx4)(F0, x30, x40) * (x4 - x40)
# Define all involved symbolic variables
# constants
M, m, g, ell = sym.symbols('M, m, g, ell', real=True, positive=True)
# system variables
x1, x2, x3, x4, F = sym.symbols('x1, x2, x3, x4, F')
# Define φ
phi = 4 * m * ell * x4**2 * sym.sin(x3) + 4 * F - 3 * m * g * sym.sin(x3) * sym.cos(x3)
phi /= 4 * (M + m) - 3 * m * sym.cos(x3)**2
# Determine the (partial) derivatives of φ, wrt to F, x3, x4
phi_deriv_F = phi.diff(F)
phi_deriv_x3 = phi.diff(x3)
phi_deriv_x4 = phi.diff(x4)
F0 = 0
x30 = 0
x40 = 0
phi_deriv_F_at_equlibrium = phi_deriv_F.subs([(F, F0), (x3, x30), (x4, x40)])
phi_deriv_x3_at_equlibrium = phi_deriv_x3.subs([(F, F0), (x3, x30), (x4, x40)])
phi_deriv_x4_at_equlibrium = phi_deriv_x4.subs([(F, F0), (x3, x30), (x4, x40)])

# x2' = aF - bx3
a = phi_deriv_F_at_equlibrium
b = -phi_deriv_x3_at_equlibrium
c = 3 / ell / (4*M+m)
d = 3 * (M + m) * g / ell / (4*M+m)

# Parameter values
M_value = 0.3
m_value = 0.1
ell_value = 0.35
g_value = 9.81

# Define a, b, c and d using parameter values given above
a_value = float(a.subs([(M, M_value), (m, m_value)]))
b_value = float(b.subs([(M, M_value), (m, m_value), (g, g_value)]))
c_value = float(c.subs([(M, M_value), (m, m_value), (g, g_value), (ell, ell_value)]))
d_value = float(d.subs([(M, M_value), (m, m_value), (g, g_value), (ell, ell_value)]))

# ------- ONLY NUMERICAL VALUES (nothing symbolic)
import control as ctrl
import matplotlib.pyplot as plt

# Tf of G(theta)
G_theta = ctrl.TransferFunction([-c_value], [1, 0, -d_value])

def pid(kp, ki, kd):
    # This function constructs the transfer function of a PID
    # controller with given parameters
    diff = ctrl.TransferFunction([1, 0] , 1)
    intgr = ctrl.TransferFunction(1, [1 , 0])
    pid_tf = kp + kd * diff + ki * intgr
    return pid_tf

my_pid = -pid(100, 0.5, 10) # pid values are negative due to the negative feedback

# tf_closed_loop_system
tf_d_to_theta = ctrl.feedback(G_theta, my_pid)
t_final = 1
num_points = 500
t_imp, theta_imp = ctrl.impulse_response(tf_d_to_theta, T = np.linspace(0, t_final, num_points))

# Convert theta from radians to degrees
theta_degrees = theta_imp * 180 / np.pi

# Plotting theta in degrees against time
plt.plot(t_imp, theta_degrees)
plt.xlabel('time / s')
plt.ylabel('theta / degrees')
plt.title('Theta against time for PID controller')
plt.grid()
plt.show()
